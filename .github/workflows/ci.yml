name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Suite
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest requests cryptography flask
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test setup wizard
      run: |
        cd setup-wizard
        python -m pytest --version || echo "No pytest tests found"
        python -c "import setup_wizard; print('Setup wizard imports successfully')"
        
    - name: Test main application
      run: |
        python -c "import app; print('Main application imports successfully')"
        
    - name: Validate Docker Compose
      run: |
        docker-compose config
        docker-compose -f docker-compose.setup.yml config

  security:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker:
    runs-on: ubuntu-latest
    name: Docker Build Test
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build main application
      run: |
        docker build -t ca-manager:test .
        
    - name: Build setup wizard
      run: |
        docker build -t ca-manager-setup:test ./setup-wizard/
        
    - name: Build SCEP simulator
      run: |
        docker build -t ios-scep-simulator:test ./ios-scep-simulator/
        
    - name: Build OCSP simulator
      run: |
        docker build -t ocsp-simulator:test ./ocsp-simulator/
        
    - name: Test container startup
      run: |
        # Test setup wizard container
        docker run --rm -d --name setup-test -p 8000:8000 ca-manager-setup:test
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop setup-test
        
  integration:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [docker]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Start services
      run: |
        # Start setup wizard for configuration generation
        docker-compose -f docker-compose.setup.yml up -d
        sleep 30
        
    - name: Test setup wizard endpoints
      run: |
        curl -f http://localhost:8000/health
        curl -f http://localhost:8000/ 
        
    - name: Generate test configuration
      run: |
        # Create minimal test config
        cat > test-config.json << EOF
        {
          "domain": "localhost",
          "ssl_type": "selfsigned",
          "organization": "Test Org",
          "country": "US",
          "email": "test@localhost"
        }
        EOF
        
        # Submit configuration
        curl -X POST -H "Content-Type: application/json" \
             -d @test-config.json \
             http://localhost:8000/api/setup
             
    - name: Stop setup wizard
      run: |
        docker-compose -f docker-compose.setup.yml down
        
    - name: Cleanup
      run: |
        docker system prune -f
        
  release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: [test, security, integration]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create release archive
      run: |
        # Create release package
        tar --exclude='.git' \
            --exclude='node_modules' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.pytest_cache' \
            --exclude='logs' \
            -czf ca-manager-${{ github.event.release.tag_name }}.tar.gz .
            
    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./ca-manager-${{ github.event.release.tag_name }}.tar.gz
        asset_name: ca-manager-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip